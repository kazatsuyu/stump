import type { Add, Dec, Inc, Sub } from './add-sub.mjs';
import type { Cmp, Le, Max } from './compare.mjs';
import type { Digits, DigitsWithout9 } from './digits.mjs';
import type { Abs, Inv, Sign } from './sign.mjs';
import type { StrLen } from './utils.mjs';

// TODO: カラツバ法とか実装したい
export type Mul<T1 extends string, T2 extends string> = mul.Impl0<T1, T2>;

namespace mul {
  export type Impl0<T1 extends string, T2 extends string> = Impl1<Abs<T1>, Abs<T2>, `${Sign<T1>}${Sign<T2>}`>;

  export type Impl1<T1 extends string, T2 extends string, S extends '++' | '+-' | '-+' | '--'> = Impl2<
    Impl3<T1, T2>,
    S
  >;

  type Impl2<T extends string, S extends '++' | '+-' | '-+' | '--'> = {
    '++': T;
    '+-': Inv<T>;
    '-+': Inv<T>;
    '--': T;
  }[S];

  type Impl3<T1 extends string, T2 extends string> = '0' extends T1 | T2 ? '0' : Impl4<T1, T2>;

  type Impl4<T1 extends string, T2 extends string> = T1 extends `${infer U}${Digits}`
    ? T1 extends `${U}${infer D extends Digits}`
      ? U extends ''
        ? MulD<T2, D>
        : Add<MulD<T2, D>, `${Impl4<U, T2>}0`>
      : never
    : never;
}

type MulD<T extends string, D extends Digits> = mulD.Impl0<T, D>;

namespace mulD {
  export type Impl0<
    T extends string,
    D extends Digits,
    C extends DigitsWithout9 = '0',
  > = T extends `${infer U}${Digits}`
    ? T extends `${U}${infer D1 extends Digits}`
      ? Impl1<U, D, D1, C>
      : never
    : never;

  type Impl1<T extends string, D0 extends Digits, D1 extends Digits, C extends DigitsWithout9> = T extends ''
    ? `${ToEmpty<Carry[C][D0][D1]>}${Table[C][D0][D1]}`
    : `${ToEmpty<Impl0<T, D0, Carry[C][D0][D1]>>}${Table[C][D0][D1]}`;

  type ToEmpty<D extends string> = D extends '0' ? '' : D;

  type Table = [
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
      ['0', '2', '4', '6', '8', '0', '2', '4', '6', '8'],
      ['0', '3', '6', '9', '2', '5', '8', '1', '4', '7'],
      ['0', '4', '8', '2', '6', '0', '4', '8', '2', '6'],
      ['0', '5', '0', '5', '0', '5', '0', '5', '0', '5'],
      ['0', '6', '2', '8', '4', '0', '6', '2', '8', '4'],
      ['0', '7', '4', '1', '8', '5', '2', '9', '6', '3'],
      ['0', '8', '6', '4', '2', '0', '8', '6', '4', '2'],
      ['0', '9', '8', '7', '6', '5', '4', '3', '2', '1'],
    ],
    [
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],
      ['1', '3', '5', '7', '9', '1', '3', '5', '7', '9'],
      ['1', '4', '7', '0', '3', '6', '9', '2', '5', '8'],
      ['1', '5', '9', '3', '7', '1', '5', '9', '3', '7'],
      ['1', '6', '1', '6', '1', '6', '1', '6', '1', '6'],
      ['1', '7', '3', '9', '5', '1', '7', '3', '9', '5'],
      ['1', '8', '5', '2', '9', '6', '3', '0', '7', '4'],
      ['1', '9', '7', '5', '3', '1', '9', '7', '5', '3'],
      ['1', '0', '9', '8', '7', '6', '5', '4', '3', '2'],
    ],
    [
      ['2', '2', '2', '2', '2', '2', '2', '2', '2', '2'],
      ['2', '3', '4', '5', '6', '7', '8', '9', '0', '1'],
      ['2', '4', '6', '8', '0', '2', '4', '6', '8', '0'],
      ['2', '5', '8', '1', '4', '7', '0', '3', '6', '9'],
      ['2', '6', '0', '4', '8', '2', '6', '0', '4', '8'],
      ['2', '7', '2', '7', '2', '7', '2', '7', '2', '7'],
      ['2', '8', '4', '0', '6', '2', '8', '4', '0', '6'],
      ['2', '9', '6', '3', '0', '7', '4', '1', '8', '5'],
      ['2', '0', '8', '6', '4', '2', '0', '8', '6', '4'],
      ['2', '1', '0', '9', '8', '7', '6', '5', '4', '3'],
    ],
    [
      ['3', '3', '3', '3', '3', '3', '3', '3', '3', '3'],
      ['3', '4', '5', '6', '7', '8', '9', '0', '1', '2'],
      ['3', '5', '7', '9', '1', '3', '5', '7', '9', '1'],
      ['3', '6', '9', '2', '5', '8', '1', '4', '7', '0'],
      ['3', '7', '1', '5', '9', '3', '7', '1', '5', '9'],
      ['3', '8', '3', '8', '3', '8', '3', '8', '3', '8'],
      ['3', '9', '5', '1', '7', '3', '9', '5', '1', '7'],
      ['3', '0', '7', '4', '1', '8', '5', '2', '9', '6'],
      ['3', '1', '9', '7', '5', '3', '1', '9', '7', '5'],
      ['3', '2', '1', '0', '9', '8', '7', '6', '5', '4'],
    ],
    [
      ['4', '4', '4', '4', '4', '4', '4', '4', '4', '4'],
      ['4', '5', '6', '7', '8', '9', '0', '1', '2', '3'],
      ['4', '6', '8', '0', '2', '4', '6', '8', '0', '2'],
      ['4', '7', '0', '3', '6', '9', '2', '5', '8', '1'],
      ['4', '8', '2', '6', '0', '4', '8', '2', '6', '0'],
      ['4', '9', '4', '9', '4', '9', '4', '9', '4', '9'],
      ['4', '0', '6', '2', '8', '4', '0', '6', '2', '8'],
      ['4', '1', '8', '5', '2', '9', '6', '3', '0', '7'],
      ['4', '2', '0', '8', '6', '4', '2', '0', '8', '6'],
      ['4', '3', '2', '1', '0', '9', '8', '7', '6', '5'],
    ],
    [
      ['5', '5', '5', '5', '5', '5', '5', '5', '5', '5'],
      ['5', '6', '7', '8', '9', '0', '1', '2', '3', '4'],
      ['5', '7', '9', '1', '3', '5', '7', '9', '1', '3'],
      ['5', '8', '1', '4', '7', '0', '3', '6', '9', '2'],
      ['5', '9', '3', '7', '1', '5', '9', '3', '7', '1'],
      ['5', '0', '5', '0', '5', '0', '5', '0', '5', '0'],
      ['5', '1', '7', '3', '9', '5', '1', '7', '3', '9'],
      ['5', '2', '9', '6', '3', '0', '7', '4', '1', '8'],
      ['5', '3', '1', '9', '7', '5', '3', '1', '9', '7'],
      ['5', '4', '3', '2', '1', '0', '9', '8', '7', '6'],
    ],
    [
      ['6', '6', '6', '6', '6', '6', '6', '6', '6', '6'],
      ['6', '7', '8', '9', '0', '1', '2', '3', '4', '5'],
      ['6', '8', '0', '2', '4', '6', '8', '0', '2', '4'],
      ['6', '9', '2', '5', '8', '1', '4', '7', '0', '3'],
      ['6', '0', '4', '8', '2', '6', '0', '4', '8', '2'],
      ['6', '1', '6', '1', '6', '1', '6', '1', '6', '1'],
      ['6', '2', '8', '4', '0', '6', '2', '8', '4', '0'],
      ['6', '3', '0', '7', '4', '1', '8', '5', '2', '9'],
      ['6', '4', '2', '0', '8', '6', '4', '2', '0', '8'],
      ['6', '5', '4', '3', '2', '1', '0', '9', '8', '7'],
    ],
    [
      ['7', '7', '7', '7', '7', '7', '7', '7', '7', '7'],
      ['7', '8', '9', '0', '1', '2', '3', '4', '5', '6'],
      ['7', '9', '1', '3', '5', '7', '9', '1', '3', '5'],
      ['7', '0', '3', '6', '9', '2', '5', '8', '1', '4'],
      ['7', '1', '5', '9', '3', '7', '1', '5', '9', '3'],
      ['7', '2', '7', '2', '7', '2', '7', '2', '7', '2'],
      ['7', '3', '9', '5', '1', '7', '3', '9', '5', '1'],
      ['7', '4', '1', '8', '5', '2', '9', '6', '3', '0'],
      ['7', '5', '3', '1', '9', '7', '5', '3', '1', '9'],
      ['7', '6', '5', '4', '3', '2', '1', '0', '9', '8'],
    ],
    [
      ['8', '8', '8', '8', '8', '8', '8', '8', '8', '8'],
      ['8', '9', '0', '1', '2', '3', '4', '5', '6', '7'],
      ['8', '0', '2', '4', '6', '8', '0', '2', '4', '6'],
      ['8', '1', '4', '7', '0', '3', '6', '9', '2', '5'],
      ['8', '2', '6', '0', '4', '8', '2', '6', '0', '4'],
      ['8', '3', '8', '3', '8', '3', '8', '3', '8', '3'],
      ['8', '4', '0', '6', '2', '8', '4', '0', '6', '2'],
      ['8', '5', '2', '9', '6', '3', '0', '7', '4', '1'],
      ['8', '6', '4', '2', '0', '8', '6', '4', '2', '0'],
      ['8', '7', '6', '5', '4', '3', '2', '1', '0', '9'],
    ],
  ];
  type Carry = [
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '1', '1', '1', '1', '1'],
      ['0', '0', '0', '0', '1', '1', '1', '2', '2', '2'],
      ['0', '0', '0', '1', '1', '2', '2', '2', '3', '3'],
      ['0', '0', '1', '1', '2', '2', '3', '3', '4', '4'],
      ['0', '0', '1', '1', '2', '3', '3', '4', '4', '5'],
      ['0', '0', '1', '2', '2', '3', '4', '4', '5', '6'],
      ['0', '0', '1', '2', '3', '4', '4', '5', '6', '7'],
      ['0', '0', '1', '2', '3', '4', '5', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '1'],
      ['0', '0', '0', '0', '0', '1', '1', '1', '1', '1'],
      ['0', '0', '0', '1', '1', '1', '1', '2', '2', '2'],
      ['0', '0', '0', '1', '1', '2', '2', '2', '3', '3'],
      ['0', '0', '1', '1', '2', '2', '3', '3', '4', '4'],
      ['0', '0', '1', '1', '2', '3', '3', '4', '4', '5'],
      ['0', '0', '1', '2', '2', '3', '4', '5', '5', '6'],
      ['0', '0', '1', '2', '3', '4', '4', '5', '6', '7'],
      ['0', '1', '1', '2', '3', '4', '5', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '0', '0', '0', '1', '1'],
      ['0', '0', '0', '0', '1', '1', '1', '1', '1', '2'],
      ['0', '0', '0', '1', '1', '1', '2', '2', '2', '2'],
      ['0', '0', '1', '1', '1', '2', '2', '3', '3', '3'],
      ['0', '0', '1', '1', '2', '2', '3', '3', '4', '4'],
      ['0', '0', '1', '2', '2', '3', '3', '4', '5', '5'],
      ['0', '0', '1', '2', '3', '3', '4', '5', '5', '6'],
      ['0', '1', '1', '2', '3', '4', '5', '5', '6', '7'],
      ['0', '1', '2', '2', '3', '4', '5', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '0', '0', '1', '1', '1'],
      ['0', '0', '0', '0', '1', '1', '1', '1', '1', '2'],
      ['0', '0', '0', '1', '1', '1', '2', '2', '2', '3'],
      ['0', '0', '1', '1', '1', '2', '2', '3', '3', '3'],
      ['0', '0', '1', '1', '2', '2', '3', '3', '4', '4'],
      ['0', '0', '1', '2', '2', '3', '3', '4', '5', '5'],
      ['0', '1', '1', '2', '3', '3', '4', '5', '5', '6'],
      ['0', '1', '1', '2', '3', '4', '5', '5', '6', '7'],
      ['0', '1', '2', '3', '3', '4', '5', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '0', '1', '1', '1', '1'],
      ['0', '0', '0', '1', '1', '1', '1', '1', '2', '2'],
      ['0', '0', '1', '1', '1', '1', '2', '2', '2', '3'],
      ['0', '0', '1', '1', '2', '2', '2', '3', '3', '4'],
      ['0', '0', '1', '1', '2', '2', '3', '3', '4', '4'],
      ['0', '1', '1', '2', '2', '3', '4', '4', '5', '5'],
      ['0', '1', '1', '2', '3', '3', '4', '5', '6', '6'],
      ['0', '1', '2', '2', '3', '4', '5', '6', '6', '7'],
      ['0', '1', '2', '3', '4', '4', '5', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '0', '1', '1', '1', '1', '1'],
      ['0', '0', '0', '1', '1', '1', '1', '1', '2', '2'],
      ['0', '0', '1', '1', '1', '2', '2', '2', '2', '3'],
      ['0', '0', '1', '1', '2', '2', '2', '3', '3', '4'],
      ['0', '1', '1', '2', '2', '3', '3', '4', '4', '5'],
      ['0', '1', '1', '2', '2', '3', '4', '4', '5', '5'],
      ['0', '1', '1', '2', '3', '4', '4', '5', '6', '6'],
      ['0', '1', '2', '2', '3', '4', '5', '6', '6', '7'],
      ['0', '1', '2', '3', '4', '5', '5', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '0', '1', '1', '1', '1', '1', '1'],
      ['0', '0', '1', '1', '1', '1', '1', '2', '2', '2'],
      ['0', '0', '1', '1', '1', '2', '2', '2', '3', '3'],
      ['0', '1', '1', '1', '2', '2', '3', '3', '3', '4'],
      ['0', '1', '1', '2', '2', '3', '3', '4', '4', '5'],
      ['0', '1', '1', '2', '3', '3', '4', '4', '5', '6'],
      ['0', '1', '2', '2', '3', '4', '4', '5', '6', '6'],
      ['0', '1', '2', '3', '3', '4', '5', '6', '7', '7'],
      ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '0', '1', '1', '1', '1', '1', '1', '1'],
      ['0', '0', '1', '1', '1', '1', '1', '2', '2', '2'],
      ['0', '1', '1', '1', '1', '2', '2', '2', '3', '3'],
      ['0', '1', '1', '1', '2', '2', '3', '3', '3', '4'],
      ['0', '1', '1', '2', '2', '3', '3', '4', '4', '5'],
      ['0', '1', '1', '2', '3', '3', '4', '4', '5', '6'],
      ['0', '1', '2', '2', '3', '4', '4', '5', '6', '7'],
      ['0', '1', '2', '3', '3', '4', '5', '6', '7', '7'],
      ['0', '1', '2', '3', '4', '5', '6', '7', '7', '8'],
    ],
    [
      ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
      ['0', '0', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '2', '2', '2', '2'],
      ['0', '1', '1', '1', '2', '2', '2', '2', '3', '3'],
      ['0', '1', '1', '2', '2', '2', '3', '3', '4', '4'],
      ['0', '1', '1', '2', '2', '3', '3', '4', '4', '5'],
      ['0', '1', '2', '2', '3', '3', '4', '5', '5', '6'],
      ['0', '1', '2', '2', '3', '4', '5', '5', '6', '7'],
      ['0', '1', '2', '3', '4', '4', '5', '6', '7', '8'],
      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '8'],
    ],
  ];
}

export type Div<T1 extends string, T2 extends string> = div.Impl0<T1, T2>;

namespace div {
  export type Impl0<T1 extends string, T2 extends string> = Impl1<Abs<T1>, Abs<T2>, `${Sign<T1>}${Sign<T2>}`>;

  export type Impl1<T1 extends string, T2 extends string, S extends '++' | '+-' | '-+' | '--'> = Impl2<
    Impl3<T1, T2>,
    S
  >;

  export type Impl2<T extends string, S extends '++' | '+-' | '-+' | '--'> = {
    '++': T;
    '+-': Inv<T>;
    '-+': Inv<T>;
    '--': T;
  }[S];

  type Impl3<T1 extends string, T2 extends string> = [T1, T2] extends { 0: '0' } | { 1: '0' }
    ? T2 extends '0'
      ? never
      : '0'
    : Impl4<T1, T2>;

  type Impl4<T1 extends string, T2 extends string, O1 extends string = T1, O2 extends string = T2> = T2 extends '1'
    ? T1
    : [T1, T2] extends [`${infer U1}${Digits}`, `${infer U2}0`]
      ? Impl4<U1, U2, O1, O2>
      : Impl5<T1, T2, RevPoint<T2>, O1, O2>;

  type Impl5<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    O1 extends string,
    O2 extends string,
    L extends string = Max<'0', Sub<Add<StrLen<T2>, StrLen<T3>>, StrLen<O1>>>,
  > = Le<Sub<T3, T2>, '2'> extends true
    ? Div10ⁿ<T1, L> extends infer U
      ? Impl6<U extends `${Digits}${string}` ? U : '1', O1, O2>
      : never
    : Impl4<Div10ⁿ<Mul<T1, T3>, L>, Div10ⁿ<Mul<T2, T3>, L>, O1, O2>;

  type Impl6<T1 extends string, O1 extends string, O2 extends string, T2 extends string = Inc<T1>> = Impl7<
    T1,
    T2,
    Cmp<Mul<O2, T1>, O1>,
    Cmp<Mul<O2, T2>, O1>,
    O1,
    O2
  >;

  type Impl7<
    T1 extends string,
    T2 extends string,
    C1 extends '-1' | '0' | '1',
    C2 extends '-1' | '0' | '1',
    O1 extends string,
    O2 extends string,
  > = C1 | C2 extends '-1'
    ? Impl6<T2, O1, O2>
    : C1 | C2 extends '1'
      ? Impl6<Dec<T1>, O1, O2, T1>
      : C2 extends '0'
        ? T2
        : T1;

  type RevPoint<T extends string, Table extends Table0 | Table1 = Table0> = T extends `${infer U}${Digits}`
    ? T extends `${U}${infer D extends Digits}`
      ? `${RevPoint<U, D extends '0' ? Table : Table1>}${Table[D]}`
      : never
    : T extends ''
      ? '1'
      : never;

  type Table0 = ['0', '9', '8', '7', '6', '5', '4', '3', '2', '1'];
  type Table1 = ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0'];

  type Div10ⁿ<T extends string, N extends string> = N extends '0'
    ? T
    : T extends `${infer U extends string}${Digits}`
      ? Div10ⁿ<U, Dec<N>>
      : never;
}

export type Div2<T extends string> = div2.Impl0<T>;

namespace div2 {
  export type Impl0<T extends string> = T extends `-${infer U}` ? Inv<Impl1<U>[0]> : Impl1<T>[0];
  export type Impl1<T extends string> = T extends `${infer U}${Digits}`
    ? T extends `${U}${infer D extends Digits}`
      ? U extends ''
        ? [Table[0][D], Carry[D]]
        : Impl1<U> extends [infer V extends string, infer C extends '0' | '1']
          ? [`${ZeroToEmpty<V>}${Table[C][D]}`, Carry[D]]
          : never
      : never
    : never;

  type ZeroToEmpty<T> = T extends '0' ? '' : T;

  type Table = [['0', '0', '1', '1', '2', '2', '3', '3', '4', '4'], ['5', '5', '6', '6', '7', '7', '8', '8', '9', '9']];
  type Carry = ['0', '1', '0', '1', '0', '1', '0', '1', '0', '1'];
}

export type Mod<T1 extends string, T2 extends string> = Sub<T1, Extract<Mul<T2, Div<T1, T2>>, string>>;
